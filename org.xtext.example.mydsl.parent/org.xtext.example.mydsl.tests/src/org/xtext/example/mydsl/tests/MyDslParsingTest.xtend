/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.example.mydsl.myDsl.Model
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.xtext.example.mydsl.myDsl.MyDslPackage
import org.xtext.example.mydsl.validation.MyDslValidator

@RunWith(XtextRunner)
@InjectWith(MyDslInjectorProvider)
class MyDslParsingTest{

	@Inject extension ParseHelper<Model> parseHelper
	@Inject extension ValidationTestHelper

	@Test 
	def void loadModel() {
		val result = parseHelper.parse('''
			Hello Xtext!
		''')
		Assert.assertNotNull(result)
	}

	@Test
	def void testReferences() {
		'''
		Hello foo!
		alias bar for foo
		'''.parse.assertNoErrors
	}

	@Test
	def void testWrongReference() {
		'''
		alias bar for foo
		Hello foo!
		'''.parse => [
			Assert.assertEquals(
				"Couldn't resolve reference to AbstractGreeting 'foo'.",
				validate.map[message].join(",")
			)
		]
	}

	@Test def void testDuplicateGreetings() {
		val input =
		'''
		Hello foo!
		Hello foo!
		'''.toString
		input.parse => [
			assertError(
				MyDslPackage.eINSTANCE.greeting,
				MyDslValidator.DUPLICATE,
				input.indexOf("foo"), 3,
				"Duplicate name"
			)
			assertError(
				MyDslPackage.eINSTANCE.greeting,
				MyDslValidator.DUPLICATE,
				input.lastIndexOf("foo"), 3,
				"Duplicate name"
			)
		]
	}
}
